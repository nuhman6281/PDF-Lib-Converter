#!/bin/bash

# ps2pdf - PostScript to PDF converter using PDF_LIB
# Usage: ps2pdf input.ps [output.pdf]

if [ $# -eq 0 ]; then
    echo "Usage: ps2pdf input.ps [output.pdf]"
    echo "Convert PostScript files to PDF using PDF_LIB rendering backend"
    exit 1
fi

INPUT_FILE="$1"
if [ $# -ge 2 ]; then
    OUTPUT_FILE="$2"
else
    # Generate output filename from input
    OUTPUT_FILE="${INPUT_FILE%.*}.pdf"
fi

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    echo "Error: Input file '$INPUT_FILE' not found"
    exit 1
fi

echo "Converting PostScript to PDF using PDF_LIB..."
echo "Input:  $INPUT_FILE"
echo "Output: $OUTPUT_FILE"

# Create a simple C++ program to do the conversion
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
cat >/tmp/pdf_lib_convert.cpp <<EOF
#include "$SCRIPT_DIR/include/pdf_lib.h"
#include <iostream>
#include <string>

using namespace PDFLib;

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: convert input.ps output.pdf\n";
        return 1;
    }
    
    std::string input_file = argv[1];
    std::string output_file = argv[2];
    
    try {
        PDFProcessor processor;
        
        ProcessingOptions options;
        options.input_files = {input_file};
        options.output_file = output_file;
        options.device_name = "pdfwrite";
        options.quality = PDFQuality::PRINTER;
        options.compatibility_level = 1.7;
        options.paper_size = PaperSize::A4;
        options.quiet = false;
        options.safer_mode = true;
        options.batch_mode = true;
        options.no_pause = true;
        
        if (!processor.Initialize(options)) {
            std::cerr << "Error: " << processor.GetLastErrorString() << "\n";
            return 1;
        }
        
        if (!processor.Process()) {
            std::cerr << "Error: " << processor.GetLastErrorString() << "\n";
            return 1;
        }
        
        std::cout << "Conversion completed successfully!\n";
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
        return 1;
    }
}
EOF

# Compile and run the converter
cd "$SCRIPT_DIR" || exit
g++ -std=c++17 -O2 -I"$SCRIPT_DIR/include" -I"$SCRIPT_DIR/src" /tmp/pdf_lib_convert.cpp "$SCRIPT_DIR/build/lib/libpdf_lib.a" -o /tmp/pdf_lib_convert

if [ $? -ne 0 ]; then
    echo "Error: Failed to compile converter"
    exit 1
fi

# Run the conversion
/tmp/pdf_lib_convert "$INPUT_FILE" "$OUTPUT_FILE"
RESULT=$?

# Clean up
rm -f /tmp/pdf_lib_convert.cpp /tmp/pdf_lib_convert

exit $RESULT
